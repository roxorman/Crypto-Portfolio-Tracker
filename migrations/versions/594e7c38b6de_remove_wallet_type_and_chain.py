"""remove_wallet_type_and_chain

Revision ID: 594e7c38b6de
Revises: 7d447c843107
Create Date: 2025-05-13 11:28:35.886223

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '594e7c38b6de'
down_revision: Union[str, None] = '7d447c843107'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Wallets table
    op.execute('ALTER TABLE wallets DROP CONSTRAINT IF EXISTS check_wallet_type;')
    op.execute('ALTER TABLE wallets DROP COLUMN IF EXISTS wallet_type;')

    # TrackedWallets table
    op.execute('ALTER TABLE tracked_wallets DROP CONSTRAINT IF EXISTS check_tracked_wallet_type;')
    op.execute('ALTER TABLE tracked_wallets DROP COLUMN IF EXISTS wallet_type;')

    # PortfolioWalletsAssociation table
    op.execute('ALTER TABLE portfolio_wallets DROP CONSTRAINT IF EXISTS uq_portfolio_wallet_chain;')
    op.execute('ALTER TABLE portfolio_wallets DROP COLUMN IF EXISTS chain;')
    
    # Only create the new unique constraint if it doesn't already exist
    # This requires checking the information_schema or just attempting and handling failure,
    # but for simplicity in this step, we'll assume it needs to be created if the old one was removed.
    # A more robust approach would be to check information_schema.pg_constraint
    # For now, let's assume it's safe to try creating it. If it exists, this might error,
    # or be handled by the DB if `CREATE UNIQUE CONSTRAINT IF NOT EXISTS` was standard (it's not for constraints).
    # A common pattern is to drop it first if it might exist from a partial previous run.
    op.execute('ALTER TABLE portfolio_wallets DROP CONSTRAINT IF EXISTS uq_portfolio_wallet;')
    op.create_unique_constraint('uq_portfolio_wallet', 'portfolio_wallets', ['portfolio_id', 'wallet_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # PortfolioWalletsAssociation table
    op.drop_constraint('uq_portfolio_wallet', 'portfolio_wallets', type_='unique')
    op.add_column('portfolio_wallets', sa.Column('chain', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    # Recreate the old unique constraint. If it had a different name, this would need adjustment.
    op.create_unique_constraint('uq_portfolio_wallet_chain', 'portfolio_wallets', ['portfolio_id', 'wallet_id', 'chain'])

    # TrackedWallets table
    op.add_column('tracked_wallets', sa.Column('wallet_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False, server_default='evm')) # Added server_default for non-nullable
    op.create_check_constraint('check_tracked_wallet_type', 'tracked_wallets', "wallet_type IN ('evm', 'solana', 'other')")

    # Wallets table
    op.add_column('wallets', sa.Column('wallet_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False, server_default='evm')) # Added server_default for non-nullable
    op.create_check_constraint('check_wallet_type', 'wallets', "wallet_type IN ('evm', 'solana', 'other')")
    # ### end Alembic commands ###
