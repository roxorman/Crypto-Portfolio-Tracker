"""add_token_price_alert_fields_to_alert_table

Revision ID: e97bbf94c241
Revises: 594e7c38b6de
Create Date: 2025-05-14 18:49:53.279958

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e97bbf94c241'
down_revision: Union[str, None] = '594e7c38b6de'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('alerts', sa.Column('token_mobula_id', sa.BigInteger(), nullable=True))
    op.add_column('alerts', sa.Column('token_display_name', sa.String(length=255), nullable=True))
    op.add_column('alerts', sa.Column('last_triggered_price', sa.Float(), nullable=True))
    
    # Manually add index for token_mobula_id
    op.create_index(op.f('ix_alerts_token_mobula_id'), 'alerts', ['token_mobula_id'], unique=False)
    
    # Add the new CHECK constraint for token_price alert fields
    # Note: CHECK constraint names should be unique within the schema.
    op.create_check_constraint(
        'check_token_price_alert_fields', # Name of the constraint
        'alerts',                         # Table name
        "(alert_type != 'token_price') OR (token_mobula_id IS NOT NULL AND token_display_name IS NOT NULL)"
    )
    
    # Potentially re-evaluate and update existing CHECK constraint for alert_type if it was too restrictive
    # If your old check_alert_type did not include 'token_price', you might need to drop and recreate it.
    # op.drop_constraint('check_alert_type', 'alerts', type_='check') # If it exists
    # op.create_check_constraint(
    #     'check_alert_type',
    #     'alerts',
    #     sa.column('alert_type').in_(['token_price', 'portfolio_value', 'wallet_tx', 'tracked_wallet_tx'])
    # )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint('check_alert_type', 'alerts', type_='check') # If you recreated it in upgrade
    op.drop_constraint('check_token_price_alert_fields', 'alerts', type_='check')
    op.drop_index(op.f('ix_alerts_token_mobula_id'), table_name='alerts')
    op.drop_column('alerts', 'last_triggered_price')
    op.drop_column('alerts', 'token_display_name')
    op.drop_column('alerts', 'token_mobula_id')
    
    # If you dropped and recreated check_alert_type, revert to the old one.
    # op.create_check_constraint(
    #    'check_alert_type', # Old name
    #    'alerts',
    #    sa.column('alert_type').in_(['portfolio_value', 'wallet_tx', 'tracked_wallet_tx']) # Old values
    # )
    # ### end Alembic commands ###
